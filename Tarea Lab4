Por favor me podría revisar lo malo del código, ingeniero, más que todo para ver mi error. 
// CLASE NODO.cpp

#include "Node.h"
#include "stdafx.h"
// Constructor por defecto
template< typename T >

Node<  T > ::Node()
{
	data = NULL;
	next = NULL;
}

// Constructor por parámetro
template<typename T>
Node<T>::Node(T data_)
{
	data = data_;
	next = NULL;
}
// Imprimir un Nodo
template<typename T>
void Node<T>::print()
{
	//cout << "Node-> " << "Dato: " << dato << " Direcion: " << this << " Siguiente: " << next << endl;
	cout << data << "-> ";
}

template<typename T>
Node<T>::~Node() {}

------------------ //NODE.H
#pragma once
#ifndef NODE_H
#define NODE_H

#include <iostream>

using namespace std;

template <class T>

class Node
{
public:
	Node();
	Node(T);
	~Node();

	Node *next;
	T data;

	void delete_all();
	void print();
};

#endif // NODE_H
---------------------
//Lista.h

#pragma once

#ifndef LISTA_H
#define LISTA_H

#include <fstream>
#include <iostream>
#include <string>
#include <stdlib.h>

#include "Node.h"
#include "Node.cpp"

using namespace std;

template <class T>
class Lista
{
public:
	Lista();
	~Lista();
	void add_head(T);
	void add_end(T);
	void print();
	void fill_random(int);

private:
	Node<T> *m_head;
	int m_num_nodes;
};
#endif // LISTA_H

----------------
//Lista.cpp
#include "stdafx.h"
#include "Lista.h"



using namespace std;

// Constructor por defecto
template <typename T >
 Lista<T>::Lista()
{
	m_num_nodes = 0;
	m_head = NULL;
}

// Insertar al inicio
template<typename T>
void Lista<T>::add_head(T data_)
{
	Node<T> *new_node = new Node<T>(data_);
	Node<T> *temp = m_head;

	if (!m_head) {
		m_head = new_node;
	}
	else {
		new_node->next = m_head;
		m_head = new_node;

		while (temp) {
			temp = temp->next;
		}
	}
	m_num_nodes++;
}
// Llenar la Lista aleatoriamente para enteros
/*template<typename T>
void Lista<T>::fill_random(int dim)
{
	srand(time(NULL));
	for (int i = 0; i < dim; i++) {
		add_end(rand() % 100);
	}
}*/

// Imprimir la Lista
template<typename T>
void Lista<T>::print()
{
	Node<T> *temp = m_head;
	if (!m_head) {
		cout << "La Lista está vacía " << endl;
	}
	else {
		while (temp) {
			temp->print();
			if (!temp->next) cout << "NULL";
			temp = temp->next;
		}
	}
	cout << endl << endl;
}

// Insertar al final
template<typename T>
void Lista<T>::add_end(T data_)
{
	Node<T> *new_node = new Node<T>(data_);
	Node<T> *temp = m_head;

	if (!m_head) {
		m_head = new_node;
	}
	else {
		while (temp->next != NULL) {
			temp = temp->next;
		}
		temp->next = new_node;
	}
	m_num_nodes++;
}
---------------- //Main
// Tarea51.cpp: define el punto de entrada de la aplicación de consola.
//


#include <iostream>
#include "stdafx.h"
#include "Lista.h"
#include "Lista.cpp"

using namespace std;

int main()
{
	Lista<int> list_1;
	Lista<int> list_2;
	int ele;

	int dim;
	int pos;
	string file_with_list;

	cout << "Ingresa la dimensión de la lista: " << endl;
	cin >> dim;

	list_1.fill_random(dim);

	cout << "Lista A al inicio " << endl;
	list_1.print();

	cout << "Agrega un elemento por la cabeza: " << endl;
	cin >> ele;
	list_1.add_head(ele);
	list_1.print();
    return 0;
}

